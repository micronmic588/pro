import re
import json
import aiohttp
import random
import string
from datetime import datetime
from pyrogram.types import Message

# Only keep in-memory history
user_histories = {}

# Command configuration
config = {
    'name': 'blackbox',
    'description': 'Get answers using Blackbox AI',
    'usage': '/blackbox [question]',
    'role': 'user',
    'cooldowns': 5,
    'usePrefix': True,
    'aliases': ['bb', 'blackbox --clean'],
    'author': 'MICRON'
}

def generate_id(length=7):
    """Generate random string ID"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def get_timestamp():
    """Get current UTC timestamp"""
    return datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'

def clean_response(text):
    """Clean the response text"""
    text = re.sub(r'\$~\$.*?\$~\$', '', text, flags=re.DOTALL)
    text = re.sub(r'\$~~\$.*?\$~~\$', '', text, flags=re.DOTALL)
    text = re.sub(r'\$~~~\$.*?\$~~~\$', '', text, flags=re.DOTALL)
    text = re.sub(r'\$@\$.*?\$@\$', '', text, flags=re.DOTALL)
    text = re.sub(r'Generated by BLACKBOX\.AI.*?blackbox\.ai', '', text, flags=re.DOTALL)
    words = text.split(maxsplit=1)
    return words[1].strip() if len(words) > 1 else ''

async def clean_history(user_id: str) -> bool:
    """Clean user's chat history"""
    if user_id in user_histories:
        user_histories.pop(user_id)
        return True
    return False

async def send_request(query: str, user_id: str, logger) -> str:
    """Send request to Blackbox API"""
    # Update chat history
    if user_id not in user_histories:
        user_histories[user_id] = []
        user_histories[user_id].append({"id": generate_id(), "content": query, "role": "user"})
    else:
        user_histories[user_id].append({"id": generate_id(), "content": query, "role": "user"})
    
    # Keep only last 5 message pairs
    if len(user_histories[user_id]) > 10:  # 5 user + 5 system messages
        user_histories[user_id] = user_histories[user_id][-10:]

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json, text/plain, */*",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        "Origin": "https://www.blackbox.ai",
        "Referer": "https://www.blackbox.ai/"
    }

    data = {
        "messages": user_histories[user_id],
        "id": generate_id(),
        "previewToken": None,
        "userId": None,
        "codeModelMode": True,
        "agentMode": {},
        "trendingAgentMode": {},
        "maxTokens": 1024,
        "playgroundTopP": 0.9,
        "playgroundTemperature": 0.5,
        "validated": "00f37b34-a166-4efb-bce5-1312d87f2f94"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://www.blackbox.ai/api/chat",
                json=data,
                headers=headers
            ) as response:
                response.raise_for_status()
                result = await response.text()
                cleaned_response = clean_response(result)

                # Add system response to history
                user_histories[user_id].append({
                    "id": generate_id(),
                    "createdAt": get_timestamp(),
                    "content": cleaned_response,
                    "role": "system"
                })

                return cleaned_response

    except Exception as e:
        logger.error(f"Error during Blackbox API request: {str(e)}")
        raise

async def display_help_message(message: Message):
    """Show detailed help message with formatting"""
    help_text = (
        "⬛ **Blackbox AI Assistant Help**\n\n"
        "Get AI-powered responses with code expertise and technical understanding.\n\n"
        "**Key Features:**\n"
        "• Code-aware responses\n"
        "• Technical documentation\n"
        "• Message history tracking (last 5 messages)\n"
        "• Clean history option\n"
        "• Reply-to-message support\n"
        "• Code formatting\n\n"
        "**Usage:**\n"
        "• `/blackbox <question>` - Ask a question\n"
        "• `/bb <question>` - Short command\n"
        "• `/blackbox --clean` - Clear chat history\n\n"
        "• Just reply to blackbox's messages to continue chat\n"
        "**Chat History:**\n"
        "• Maintains last 5 conversation pairs\n"
        "• Memory-only storage (clears on restart)\n"
        "• Conversation context awareness\n\n"
        "**Special Features:**\n"
        "• Internet enabled responses✅\n"
        "• Real-time data access\n"
        "• Code syntax highlighting\n"
        "• Onreply function works by replying message\n"
        "**Examples:**\n"
        "`/blackbox How to write a Python function?`\n"
        "`/bb Explain Docker containers`\n"
        "`/blackbox --clean` (to clear history)"
    )
    await message.reply(help_text)

async def run(client, message, args, history, logger):
    user_id = str(message.from_user.id)
    
    # Add help message trigger
    if not args or args[0].lower() == 'help':
        await display_help_message(message)
        return

    # Handle clean command
    if args and args[0] == '--clean':
        if await clean_history(user_id):
            await message.reply("✅ Your chat history has been cleared.")
        else:
            await message.reply("No chat history found to clear.")
        return

    query = ' '.join(args)

    if not query:
        await message.reply("Please provide a question.\nUsage: `/blackbox your question`")
        return

    # Send initial status
    status_msg = await message.reply("✍️ Writing your answer...", quote=True)

    try:
        result = await send_request(query, user_id, logger)
        await status_msg.delete()
        sent_msg = await message.reply(result, quote=True)
        return sent_msg
    except Exception as error:
        logger.error(f"Error in 'blackbox' command: {str(error)}")
        await status_msg.edit("❌ Failed to get an answer. Please try again later.")

async def on_reply(client, message, history, logger):
    user_id = str(message.from_user.id)
    user_message = message.text

    # Send initial status
    status_msg = await message.reply("✍️ Writing your answer...", quote=True)

    try:
        result = await send_request(user_message, user_id, logger)
        await status_msg.delete()
        sent_msg = await message.reply(result, quote=True)
        return sent_msg
    except Exception as error:
        logger.error(f"Error in 'blackbox' command on_reply: {str(error)}")
        await status_msg.edit("❌ Failed to get an answer. Please try again later.")
